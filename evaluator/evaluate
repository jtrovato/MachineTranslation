#!/usr/bin/env python
import sys
import argparse # optparse is deprecated
from itertools import islice # slicing for iterators
 
def word_matches(h, ref):
    return sum(1 for w in h if w in ref)

def meteor_score(h, ref):
    alpha = 0.5
    beta = 0.8
    gamma = 0.1
    matched_unigrams = word_matches(h,ref);
    intersection =  list(set(h) & set(ref));# this could be losing information for repeated unigrams
    precision = len(intersection)/float(len(h))
    recall = len(intersection)/float(len(ref))

    #chunking
    num_chunks = 0
    for i in xrange(len(h)):
        for j in xrange(len(ref)):
            if h[i] == ref[j]:
                k = 1
                while j+k < len(ref) and i+k < len(h):
                    if h[i:i+k] == ref[j:j+k]:
                        k += 1
                        
                    else:
                        i = i+k-1
                        break
            num_chunks += 1

    if len(intersection) == 0:
        #sys.stderr.write('len i ' + str(len(intersection)) + '\n')

        return 0 
    else:
        #sys.stderr.write('recall ' + str(recall) + '\n')
        #sys.stderr.write('precision ' + str(precision) + '\n')


        return (1-gamma*(num_chunks/float(matched_unigrams))**beta)*((precision*recall)/float(((1-alpha)*recall + precision)))
 
def main():
    parser = argparse.ArgumentParser(description='Evaluate translation hypotheses.')
    parser.add_argument('-i', '--input', default='data/hyp1-hyp2-ref',
            help='input file (default data/hyp1-hyp2-ref)')
    parser.add_argument('-n', '--num_sentences', default=None, type=int,
            help='Number of hypothesis pairs to evaluate')
    # note that if x == [1, 2, 3], then x[:None] == x[:] == x (copy); no need for sys.maxint
    opts = parser.parse_args()
 
    # we create a generator and avoid loading all sentences into a list
    def sentences():
        with open(opts.input) as f:
            for pair in f:
                yield [sentence.strip().split() for sentence in pair.split(' ||| ')]
 
    # note: the -n option does not work in the original code
    i = 0
    for h1, h2, ref in islice(sentences(), opts.num_sentences):
        i += 1
        sys.stderr.write('sentence ' + str(i) + '\n')
        rset = set(ref)
        #score1 = word_matches(h1, rset)
        #score2 = word_matches(h2, rset)
        score1 = meteor_score(h1, ref)
        score2 = meteor_score(h2, ref)

        print(1 if score1 > score2 else # \begin{cases}
                (1 if score1 == score2
                    else -1)) # \end{cases}
 
# convention to allow import of this file as a module
if __name__ == '__main__':
    main()
